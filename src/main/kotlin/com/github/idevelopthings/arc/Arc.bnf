{
    parserClass="com.github.idevelopthings.arc.parser.ArcParser"
    parserUtilClass="com.github.idevelopthings.arc.parser.ArcParserUtil"
    psiImplUtilClass="com.github.idevelopthings.arc.psi.impl.ArcPsiUtilImpl"


    implements='com.github.idevelopthings.arc.psi.ext.ArcElement'
    extends='com.github.idevelopthings.arc.psi.ext.ArcElementImpl'
    // extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    elementTypeHolderClass="com.github.idevelopthings.arc.psi.ArcTypes"

    elementTypeClass="com.github.idevelopthings.arc.psi.ArcElementType"
    tokenTypeClass="com.github.idevelopthings.arc.psi.ArcTokenType"

    psiClassPrefix="Arc"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.idevelopthings.arc.psi"
    psiImplPackage="com.github.idevelopthings.arc.psi.impl"

    generate=[token-accessors="yes"]
    generateTokenAccessors=true


    tokens=[
        LINE_COMMENT="regexp://.*"
        BLOCK_COMMENT="regexp:/\*.*?\*/"

        // Characters
        COLON=':'
        COLONCOLON='::'
        DOT='.'
        COMMA=','
        SEMICOLON=';'
        LCURLY='{'
        RCURLY='}'
        LBRACK='['
        RBRACK=']'
        LPAREN='('
        RPAREN=')'
        DOTDOT='..'
        DOTDOTDOT='...'
        BRACKET_PAIR='[]'
        QUESTION='?'


        // Operators
        PLUS='+'
        PLUSEQ='+='
        MINUS='-'
        MINUSEQ='-='
        MUL='*'
        MULEQ='*='
        DIV='/'
        DIVEQ='/='
        EQ='='
        LANGLE='<'
        LE='<='
        RANGLE='>'
        GE='>='
        EQEQ='=='
        NE='!='
        AND='&&'
        OR='||'
        NOT='!'

        // Keywords
        VAR_KW='var'
        FUNC_KW='func'
        EXTERN_KW='extern'
        OBJECT_KW='object'
        RETURN_KW='return'
        BREAK_KW='break'
        CONTINUE_KW='continue'
        IF_KW='if'
        ELSE_KW='else'
        FOR_KW='for'
        AS_KW='as'
        STEP_KW='step'
        IMPORT_KW='import'
        DELETE_KW='delete'
        ENUM_KW='enum'
        OR_KW='or'
        DEFER_KW='defer'
        HTTP_KW='http'
        HTTP_ROUTE_KW='route'
        HTTP_FROM_KW='from'

        //    VALUE_STRING="regexp:(\"[A-Za-z_][A-Za-z0-9_]*\"|'[A-Za-z_][A-Za-z0-9_]*')"
        VALUE_NULL="regexp:null|NULL"
        VALUE_BOOL="regexp:true|false"
        VALUE_INTEGER="regexp:[0-9]+"
        // .0f 0.0f
        VALUE_FLOAT="regexp:([-]?[0-9]*\.[0-9]+([Ee][+\-]?[0-9]+)?f|[-]?[0-9]+([Ee][+\-]?[0-9]+)?f)"

        ID="regexp:[a-zA-Z_][a-zA-Z_0-9]*"


        SEMICOLON_SYNTHETIC  = '<NL>'
    ]

    extends(".*expr")=expression

    implements("type|type_ref|object_id|var_id|func_id|func_receiver_name|enum_id|argument_id")="com.github.idevelopthings.arc.psi.ArcNamedElement"
    extends("type|type_ref|object_id|var_id|func_id|func_receiver_name|enum_id|argument_id")="com.github.idevelopthings.arc.psi.ArcNamedElementImpl"
}


program ::= top_level_declarations


//private semi ::=  ',' | ';' | <<eof>>
private semi ::= '<NL>'| ',' | ';' | <<eof>>

//private keys ::= '::' | 'var' | 'object' | 'func' | 'enum' | 'or' | 'import' | 'http' | 'route' | 'from' | 'return' | 'break' | 'continue' | 'if' | 'else' | 'for' | 'as' | 'step' | 'delete' | 'defer'

private top_level_declarations ::= top_level_declaration*

top_level_declaration ::= !<<eof>> import_statement* (object_declaration | func_declaration | external_func_declaration | enum_declaration | http_block) {
    mixin="com.github.idevelopthings.arc.psi.ArcBaseTopLevelDeclarationImpl"
    implements="com.github.idevelopthings.arc.psi.ArcBaseTopLevelDeclaration"
    methods=[getName]
    pin = 1
    recoverWhile=top_level_declaration_recovery_parser
}

//private top_level_declaration_recovery_parser ::= !(keys | ';' | '}' | <<eof>>)
private top_level_declaration_recovery_parser ::= !(';' | 'object' | 'func' | 'enum' | 'or' | 'import' | 'http' | 'extern')

type ::= <<setIdentMode 'IdentMode.ON'>> <<parseIdentifier>> <<setIdentMode 'IdentMode.OFF'>>  {
  methods=[getName getNameIdentifier getReference getId]
}
private type_array ::= '[]' type {extends=type elementType=type}
private type_option ::= '?' type {extends=type elementType=type}
private type_result ::= '!' type {extends=type elementType=type}

type_ref ::= type | type_array | type_option | type_result {
    methods=[getName getNameIdentifier getReference]
    extends=type
}

object_id ::= <<setIdentMode 'IdentMode.ON'>> <<parseIdentifier>> <<setIdentMode 'IdentMode.OFF'>> {
    methods=[getName getNameIdentifier getId]
}


enum_id ::= ID {
  methods=[getName getNameIdentifier]
}
var_id ::= ID {
    implements=["com.intellij.psi.PsiElement" "com.github.idevelopthings.arc.psi.PsiElementWithLookup"]
    methods=[getLookupElement]
}
argument_id ::= ID {
  methods=[getName getNameIdentifier]
}

enum_declaration ::= 'enum' enum_id '{' enum_fields? '}' {
    extends="com.github.idevelopthings.arc.psi.ArcEnumImpl"
    implements="com.github.idevelopthings.arc.psi.ArcEnum"
    methods=[processDeclarations]
}
private enum_fields ::= enum_field_declaration*
enum_field_declaration ::= (enum_value|enum_value_ctor) semi? {
    mixin="com.github.idevelopthings.arc.psi.ArcEnumFieldImpl"
    implements="com.github.idevelopthings.arc.psi.ArcEnumField"
}
private enum_value ::= ID '=' value_expr
private enum_value_ctor ::= ID enum_value_ctor_arg_list

enum_value_ctor_arg_list ::= "(" (enum_value_ctor_arg ("," enum_value_ctor_arg)*)? ")"
enum_value_ctor_arg ::= (ID? type_ref) | type_ref

object_declaration ::= 'object' object_id '{' object_fields? '}' {
  mixin="com.github.idevelopthings.arc.psi.ArcObjectImpl"
  implements="com.github.idevelopthings.arc.psi.ArcObject"
  methods=[getName getPresentation]
}

private object_fields ::= object_field_declaration*
object_field_key ::= ID
object_field_declaration ::= !'}' object_field_key type_ref {
    pin=1
    recoverWhile="object_field_declaration_recover"
    mixin="com.github.idevelopthings.arc.psi.ArcBaseDeclarationImpl"
    implements=["com.github.idevelopthings.arc.psi.ArcBaseDeclaration" "com.github.idevelopthings.arc.psi.PsiElementWithLookup"]
    methods=[getLookupElement]
}
private object_field_declaration_recover ::= !('}' | (object_field_key type_ref))

object_instantiate_field ::= object_field_key ":" expression
object_instantiate_fields ::= object_instantiate_field ("," object_instantiate_field)* ','?
object_instantiate_expr ::= type "{" object_instantiate_fields "}"?

argument_declaration_list ::= "(" (argument_declaration ("," argument_declaration)*)? ")" {
    methods=[getPresentation processDeclarations]
}
argument_declaration ::= (argument_id type_ref)|(argument_id '...' type_ref) {
    implements="com.github.idevelopthings.arc.completion.references.ArcResolvable"
    extends="com.github.idevelopthings.arc.completion.references.ArcBaseResolvable"
}

// route GET "/hello"
http_block ::= 'http' block_body
//private http_block_body ::= '{' http_route_declaration* '}'
http_route_declaration ::= 'route' ('GET'|'POST'|'PUT'|'DELETE'|'PATCH') value_string block_body
// from <body|query|route> as <var name> <type>
http_body_injection ::= 'from' ('body'|'query'|'route') 'as' var_id type_ref semi?
// Loops:
// for { }
// for <id> { }
// for <expr>...<expr> { }
// for <expr>...<expr> (as <id>)? (step <number>)? { }
for_loop_statement ::= 'for' (for_loop_header block_body | block_body)
for_loop_header ::= (ID | range_expr) ('as' ID)? ('step' expression)?

if_statement ::= 'if' ((!'(' expression)|paren_expr) block_body else_statement?
else_statement ::= 'else' else_chain
private else_chain ::= (!('if' '{') block_body | if_statement) {
    pin(".*")=1
}

return_statement ::= 'return' [expression] semi? {
    // pin=1
    // recoverWhile="ref_expr_recovery_parser"
    pin(".*")=1
}

import_statement ::= 'import' value_string semi? {
methods=[getReference]
}

delete_statement ::= 'delete' expression semi? {pin=1}

// defer statement:
// defer { ... }
// defer func() { ... }
defer_statement ::= 'defer' (anonymous_func | block_body)

variable_declaration ::= "var" var_id [type_ref] (("=" expression semi?)|semi?) {
    implements="com.github.idevelopthings.arc.psi.ArcBaseDeclaration"
    extends="com.github.idevelopthings.arc.psi.ArcBaseDeclarationImpl"
    methods=[getLookupElement]
}

// {pin(".*")=1}
// arg_list ::= '(' [ !')' expression  (',' expression) * ] ')' {pin(".*")=1}
statement ::= if_statement
    | http_body_injection
    | for_loop_statement
    | variable_declaration
    | return_statement
    | delete_statement
    | defer_statement
    | http_route_declaration
    | expression semi?
{
    extends="com.github.idevelopthings.arc.psi.ArcBaseStatementImpl"
    implements="com.github.idevelopthings.arc.psi.ArcBaseStatement"
}

block_body ::= "{" statement* "}" {
    pin=1
    methods=[processDeclarations]
}

anonymous_func ::= FUNC_KW argument_declaration_list type_ref? block_body {
    pin=1
    extends="com.github.idevelopthings.arc.psi.ArcFunctionImpl"
    implements="com.github.idevelopthings.arc.psi.ArcFunction"
}
func_declaration ::= !EXTERN_KW FUNC_KW func_receiver_declaration? func_id argument_declaration_list type_ref? block_body {
    pin=2
    extends="com.github.idevelopthings.arc.psi.ArcFunctionImpl"
    implements="com.github.idevelopthings.arc.psi.ArcFunction"
    methods=[getName getPresentation]
}
external_func_declaration ::= EXTERN_KW FUNC_KW func_receiver_declaration? func_id argument_declaration_list type_ref {
    pin=2
    extends="com.github.idevelopthings.arc.psi.ArcFunctionImpl"
    implements="com.github.idevelopthings.arc.psi.ArcFunction"
    methods=[getName getPresentation]
}
func_id ::= ID {
  methods=[getReference]
}
func_receiver_declaration ::= "(" func_receiver_name? type ")"
func_receiver_name ::= ID {methods=[getReference getLookupElement]}

// Dictionaries/hashmap:
// {a: 1, b: 2} | {'a':1, "b":2}
dictionary ::= '{' dictionary_fields? '}'
dictionary_field ::= (ID|value_string) ':' expression
dictionary_fields ::= dictionary_field (',' dictionary_field)* ','?

// Arrays/lists:
// [1, 2, 3]
list ::= '{' list_elements? '}'
list_elements ::= expression (',' expression)* ','?

value_number ::= VALUE_INTEGER | VALUE_FLOAT
value_string ::= DOUBLE_QUOUTE_STRING | SINGLE_QUOUTE_STRING | BACKTICK_STRING {pin=1}

value_expr ::= object_instantiate_expr
    | value_string
    | VALUE_NULL
    | VALUE_BOOL
    | value_number
    | dictionary
    | list
{
    mixin="com.github.idevelopthings.arc.psi.ArcBaseExpressionElementImpl"
    implements="com.github.idevelopthings.arc.psi.ArcBaseExpressionElement"
    methods=[getName getNameIdentifier getReference]
}


expression ::=
    assign_expr
    | conditional_group
    | range_expr
    | add_group
    | mul_group
    | unary_group
    | qualification_expr
    | call_group
    | primary_group
    | or_error_expr
  {extraRoot=true}


private conditional_group ::= conditional_expr
private unary_group ::= unary_plus_expr | unary_min_expr | unary_not_expr
private mul_group ::= mul_expr | div_expr
private add_group ::= plus_expr | minus_expr

private call_group ::= global_call_expr | member_call_expr
private primary_group ::= value_expr | array_access_expr | simple_ref_expr | paren_expr

upper or_error_expr ::= expression 'or' (block_body | expression) //  {rightAssociative=true}

paren_expr ::= '(' expression ')'

assign_expr ::= expression ('='|'+='|'-='|'*='|'/=') expression {rightAssociative=true}

unary_min_expr ::= '-' expression
unary_plus_expr ::= '+' expression
unary_not_expr ::= '!' expression

minus_expr ::= expression "-" expression
plus_expr ::= expression "+" expression

div_expr ::= expression '/' expression
mul_expr ::= expression '*' expression

fake ref_expr ::= expression? ('.'|'::') ID {
    mixin="com.github.idevelopthings.arc.psi.ArcIdReferenceExprImpl"
    implements="com.github.idevelopthings.arc.psi.ArcIdReferenceExpr"
    methods=[isStatic isCallExpression getReference]
}
simple_ref_expr ::= ID {
    extends=ref_expr
    //recoverWhile="ref_expr_recovery_parser"
    implements="com.github.idevelopthings.arc.completion.references.ArcResolvable"
}
qualification_expr ::= expression ('.'|'::') ID {
    extends=ref_expr
    elementType=ref_expr
    methods=[isStatic]
    //pin=2
    //recoverWhile="ref_expr_recovery_parser"
}

private ref_expr_recovery_parser ::= !('.'|'::'|'}' | ',' | ';'|'[' | '<NL>')

fake call_expr ::= qualification_expr arg_list {
    methods=[isBuiltin isStatic getLHS getReference]
}
member_call_expr ::= qualification_expr !<<isBuiltin>> arg_list {
    extends=call_expr
    elementType=call_expr
}
global_call_expr ::= simple_ref_expr arg_list{
    extends=call_expr
    elementType=call_expr
}
//call_expr ::= qualification_expr !<<isBuiltin>> arg_list
//builtin_call_expr ::= qualification_expr <<isBuiltin>> arg_list
arg_list ::= '(' [ !')' expression  (',' expression) * ] ')' {pin(".*")=1}

array_access_expr ::= expression slice_group

private slice_group ::= rhs_slice_expr | lhs_slice_expr | both_slice_expr | index_access_expr

rhs_slice_expr ::= "[" ":" expression "]"
lhs_slice_expr ::= "[" expression ":" "]"
both_slice_expr ::= "[" expression ":" expression "]"
index_access_expr ::= "[" expression "]"
// [1:2] [1:] [:2] [1]
//slice_expr ::=
//      "[" ":" expression "]"
//    | "[" expression ":" "]"
//    | "[" expression ":" expression "]"
//    | "[" expression "]"

range_expr ::= value_expr '..' value_expr

conditional_expr ::= expression ('<' | '>' | '<=' | '>=' | '==' | '!=' | '&&' | '||') expression

